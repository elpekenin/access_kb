diff --git a/drivers/painter/comms/qp_comms_spi.c b/drivers/painter/comms/qp_comms_spi.c
index 9f52bc7d1f..c48f8af634 100644
--- a/drivers/painter/comms/qp_comms_spi.c
+++ b/drivers/painter/comms/qp_comms_spi.c
@@ -1,4 +1,5 @@
 // Copyright 2021 Nick Brassel (@tzarc)
+// Copyright 2023 Pablo Martinez (@elpekenin)
 // SPDX-License-Identifier: GPL-2.0-or-later
 
 #ifdef QUANTUM_PAINTER_SPI_ENABLE
@@ -9,7 +10,7 @@
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // Base SPI support
 
-bool qp_comms_spi_init(painter_device_t device) {
+WEAK bool qp_comms_spi_init(painter_device_t device) {
     painter_driver_t *     driver       = (painter_driver_t *)device;
     qp_comms_spi_config_t *comms_config = (qp_comms_spi_config_t *)driver->comms_config;
 
@@ -23,17 +24,16 @@ bool qp_comms_spi_init(painter_device_t device) {
     return true;
 }
 
-bool qp_comms_spi_start(painter_device_t device) {
+WEAK bool qp_comms_spi_start(painter_device_t device) {
     painter_driver_t *     driver       = (painter_driver_t *)device;
     qp_comms_spi_config_t *comms_config = (qp_comms_spi_config_t *)driver->comms_config;
-
     return spi_start(comms_config->chip_select_pin, comms_config->lsb_first, comms_config->mode, comms_config->divisor);
 }
 
-uint32_t qp_comms_spi_send_data(painter_device_t device, const void *data, uint32_t byte_count) {
+WEAK uint32_t qp_comms_spi_send_data(painter_device_t device, const void *data, uint32_t byte_count) {
     uint32_t       bytes_remaining = byte_count;
     const uint8_t *p               = (const uint8_t *)data;
-    const uint32_t max_msg_length  = 1024;
+    uint32_t       max_msg_length  = 1024;
 
     while (bytes_remaining > 0) {
         uint32_t bytes_this_loop = MIN(bytes_remaining, max_msg_length);
@@ -45,7 +45,7 @@ uint32_t qp_comms_spi_send_data(painter_device_t device, const void *data, uint3
     return byte_count - bytes_remaining;
 }
 
-void qp_comms_spi_stop(painter_device_t device) {
+WEAK void qp_comms_spi_stop(painter_device_t device) {
     painter_driver_t *     driver       = (painter_driver_t *)device;
     qp_comms_spi_config_t *comms_config = (qp_comms_spi_config_t *)driver->comms_config;
     spi_stop();
@@ -64,7 +64,7 @@ const painter_comms_vtable_t spi_comms_vtable = {
 
 #    ifdef QUANTUM_PAINTER_SPI_DC_RESET_ENABLE
 
-bool qp_comms_spi_dc_reset_init(painter_device_t device) {
+WEAK bool qp_comms_spi_dc_reset_init(painter_device_t device) {
     if (!qp_comms_spi_init(device)) {
         return false;
     }
@@ -90,14 +90,14 @@ bool qp_comms_spi_dc_reset_init(painter_device_t device) {
     return true;
 }
 
-uint32_t qp_comms_spi_dc_reset_send_data(painter_device_t device, const void *data, uint32_t byte_count) {
+WEAK uint32_t qp_comms_spi_dc_reset_send_data(painter_device_t device, const void *data, uint32_t byte_count) {
     painter_driver_t *              driver       = (painter_driver_t *)device;
     qp_comms_spi_dc_reset_config_t *comms_config = (qp_comms_spi_dc_reset_config_t *)driver->comms_config;
     writePinHigh(comms_config->dc_pin);
     return qp_comms_spi_send_data(device, data, byte_count);
 }
 
-void qp_comms_spi_dc_reset_send_command(painter_device_t device, uint8_t cmd) {
+WEAK void qp_comms_spi_dc_reset_send_command(painter_device_t device, uint8_t cmd) {
     painter_driver_t *              driver       = (painter_driver_t *)device;
     qp_comms_spi_dc_reset_config_t *comms_config = (qp_comms_spi_dc_reset_config_t *)driver->comms_config;
     writePinLow(comms_config->dc_pin);
@@ -105,21 +105,13 @@ void qp_comms_spi_dc_reset_send_command(painter_device_t device, uint8_t cmd) {
 }
 
 void qp_comms_spi_dc_reset_bulk_command_sequence(painter_device_t device, const uint8_t *sequence, size_t sequence_len) {
-    painter_driver_t *              driver       = (painter_driver_t *)device;
-    qp_comms_spi_dc_reset_config_t *comms_config = (qp_comms_spi_dc_reset_config_t *)driver->comms_config;
     for (size_t i = 0; i < sequence_len;) {
         uint8_t command   = sequence[i];
         uint8_t delay     = sequence[i + 1];
         uint8_t num_bytes = sequence[i + 2];
         qp_comms_spi_dc_reset_send_command(device, command);
         if (num_bytes > 0) {
-            if (comms_config->command_params_uses_command_pin) {
-                for (uint8_t j = 0; j < num_bytes; j++) {
-                    qp_comms_spi_dc_reset_send_command(device, sequence[i + 3 + j]);
-                }
-            } else {
-                qp_comms_spi_dc_reset_send_data(device, &sequence[i + 3], num_bytes);
-            }
+            qp_comms_spi_dc_reset_send_data(device, &sequence[i + 3], num_bytes);
         }
         if (delay > 0) {
             wait_ms(delay);
@@ -140,6 +132,67 @@ const painter_comms_with_command_vtable_t spi_comms_with_dc_vtable = {
     .bulk_command_sequence = qp_comms_spi_dc_reset_bulk_command_sequence,
 };
 
+////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+// SPI with D/C and RST pins but sending one byte at a time, needed for some devices
+
+WEAK void qp_comms_spi_dc_reset_single_byte_send_command(painter_device_t device, uint8_t cmd) {
+    painter_driver_t *              driver       = (painter_driver_t *)device;
+    qp_comms_spi_dc_reset_config_t *comms_config = (qp_comms_spi_dc_reset_config_t *)driver->comms_config;
+
+    writePinLow(comms_config->dc_pin);
+    writePinLow(comms_config->spi_config.chip_select_pin);
+    spi_write(cmd);
+    writePinHigh(comms_config->spi_config.chip_select_pin);
+}
+
+WEAK uint32_t qp_comms_spi_dc_reset_single_byte_send_data(painter_device_t device, const void *data, uint32_t byte_count) {
+    painter_driver_t *              driver       = (painter_driver_t *)device;
+    qp_comms_spi_dc_reset_config_t *comms_config = (qp_comms_spi_dc_reset_config_t *)driver->comms_config;
+
+    uint32_t       bytes_remaining = byte_count;
+    const uint8_t *p               = (const uint8_t *)data;
+    uint32_t       max_msg_length  = 1;
+
+    writePinHigh(comms_config->dc_pin);
+    while (bytes_remaining > 0) {
+        uint32_t bytes_this_loop = MIN(bytes_remaining, max_msg_length);
+        writePinLow(comms_config->spi_config.chip_select_pin);
+        spi_transmit(p, bytes_this_loop);
+        writePinHigh(comms_config->spi_config.chip_select_pin);
+        p += bytes_this_loop;
+        bytes_remaining -= bytes_this_loop;
+    }
+
+    return byte_count - bytes_remaining;
+}
+
+WEAK void qp_comms_spi_dc_reset_single_byte_bulk_command_sequence(painter_device_t device, const uint8_t *sequence, size_t sequence_len) {
+    for (size_t i = 0; i < sequence_len;) {
+        uint8_t command   = sequence[i];
+        uint8_t delay     = sequence[i + 1];
+        uint8_t num_bytes = sequence[i + 2];
+        qp_comms_spi_dc_reset_single_byte_send_command(device, command);
+        if (num_bytes > 0) {
+            qp_comms_spi_dc_reset_single_byte_send_data(device, &sequence[i + 3], num_bytes);
+        }
+        if (delay > 0) {
+            wait_ms(delay);
+        }
+        i += (3 + num_bytes);
+    }
+}
+
+const painter_comms_with_command_vtable_t spi_comms_with_dc_single_byte_vtable = {
+    .base =
+        {
+            .comms_init  = qp_comms_spi_dc_reset_init,
+            .comms_start = qp_comms_spi_start,
+            .comms_send  = qp_comms_spi_dc_reset_single_byte_send_data,
+            .comms_stop  = qp_comms_spi_stop,
+        },
+    .send_command          = qp_comms_spi_dc_reset_single_byte_send_command,
+    .bulk_command_sequence = qp_comms_spi_dc_reset_single_byte_bulk_command_sequence,
+};
 #    endif // QUANTUM_PAINTER_SPI_DC_RESET_ENABLE
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
diff --git a/drivers/painter/comms/qp_comms_spi.h b/drivers/painter/comms/qp_comms_spi.h
index ff323c3c10..621af9c384 100644
--- a/drivers/painter/comms/qp_comms_spi.h
+++ b/drivers/painter/comms/qp_comms_spi.h
@@ -1,5 +1,7 @@
 // Copyright 2021 Nick Brassel (@tzarc)
+// Copyright 2023 Pablo Martinez (@elpekenin)
 // SPDX-License-Identifier: GPL-2.0-or-later
+
 #pragma once
 
 #ifdef QUANTUM_PAINTER_SPI_ENABLE
@@ -9,6 +11,10 @@
 #    include "gpio.h"
 #    include "qp_internal.h"
 
+#    if !defined(WEAK)
+#        define WEAK __attribute__((weak))
+#    endif
+
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // Base SPI support

@@ -44,6 +49,12 @@ void     qp_comms_spi_dc_reset_bulk_command_sequence(painter_device_t device, co
 
 extern const painter_comms_with_command_vtable_t spi_comms_with_dc_vtable;
 
+void     qp_comms_spi_dc_reset_single_byte_send_command(painter_device_t device, uint8_t cmd);
+uint32_t qp_comms_spi_dc_reset_single_byte_send_data(painter_device_t device, const void* data, uint32_t byte_count);
+void     qp_comms_spi_dc_reset_single_byte_bulk_command_sequence(painter_device_t device, const uint8_t* sequence, size_t sequence_len);
+
+extern const painter_comms_with_command_vtable_t spi_comms_with_dc_single_byte_vtable;
+
 #    endif // QUANTUM_PAINTER_SPI_DC_RESET_ENABLE
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
