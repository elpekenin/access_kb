    // Creamos el systray
    let tray_menu = SystemTrayMenu::new()
        .add_item(CustomMenuItem::new("show".to_string(), "Show"))
        .add_item(CustomMenuItem::new("hide".to_string(), "Hide"))
        .add_native_item(SystemTrayMenuItem::Separator)
        .add_item(CustomMenuItem::new("quit".to_string(), "Quit"));

    // Lo incluimos en el programa, asi como su logica
    .system_tray(system_tray)
    .on_system_tray_event(move |app, event|
        match event {
            // Al usar click izquierdo
            SystemTrayEvent::MenuItemClick { id, .. } => {
                // Segun boton usado
                match id.as_str() {
                    "hide" => app.get_window("main").unwrap().hide().unwrap(),
                    "quit" => {
                        user::on_close(_state.clone());
                        std::process::exit(0);
                    },
                    "show" => app.get_window("main").unwrap().show().unwrap(),
                    _ => {}
                }
            },
            // Otros eventos, no hacemos nada
            _ => {}
        }
    )

    // Interceptamos el cierre para evitarlo
    .on_window_event(|event| match event.event() {
        tauri::WindowEvent::CloseRequested { api, .. } => {
            event.window().hide().unwrap();
            api.prevent_close()
        },
        // Otros eventos, no hacemos nada
        _ => {}
    })